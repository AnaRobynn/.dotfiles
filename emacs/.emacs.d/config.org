#+TITLE: Emacs configuration
#+AUTHOR: venikx
#+STARTUP: content, indent

* Keybindings
** Reload ~init.el~
Custom command for reloading the init file. Currently is not bound to any keybindings just yet.

#+BEGIN_SRC emacs-lisp
  (defun venikx/load-init()
    "Reload '.emacs.d/init.el'."
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC

** ~general.el~
Creating keybindings is done using general in stead of the regular Emacs keybindings, since it plays
nicely with ~evil-mode~.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'general)
  (general-define-key :states '(normal motion emacs) "SPC" nil)
#+END_SRC

* Modifying Emacs to modern defaults
** Remove unneeded bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (column-number-mode 1)
#+END_SRC

** Prettify the UI, scrolling and remove annoying default configs
Use prettier symbols, stop the cursor from blinking, follow semantic links automatically, backup
files in a separate backup folder, ...

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  (global-hl-line-mode)
  (blink-cursor-mode 0)

  (setq-default ring-bell-function 'ignore
                scroll-conservatively 10
                scroll-preserve-screen-position t
                inhibit-startup-screen t
                confirm-kill-processes nil
                backup-by-copying t
                backup-directory-alist `(("." . "~/.emacs-saves"))
                vc-follow-symlinks t)
#+END_SRC

** Display parentheses after a tiny delay
#+BEGIN_SRC emacs-lisp
  (setq-default show-paren-delay 0.1)
  (show-paren-mode)
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC

** Indentation
Use spaces, instead of hard tabs. The TAB behavior is to try and trigger autocompletion.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
#+END_SRC

** Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
  (defun venikx/reset-text-size ()
    "Reset the text scale back to it's default."
    (interactive)
    (text-scale-set 0))

  (setq-default line-spacing 0)
  (venikx/reset-text-size)

  (general-define-key "C-=" 'venikx/reset-text-size
                      "C-+" 'text-scale-increase
                      "C--" 'text-scale-decrease)
#+END_SRC

** UTF-8
Adds UTF-8 support for Emacs (shame on you for support it by default).

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'challenger-deep t)
  ;; (load-theme 'gruvbox-dark-hard t)
  ;; (load-theme 'tao-yin t)
#+END_SRC

* Web Development
** prettier-js & node-modules-path
Loads the node-modules into the path.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'add-node-modules-path 'prettier-js)

  (add-hook 'js2-mode-hook #'add-node-modules-path)
  (add-hook 'js2-mode-hook #'prettier-js-mode)
#+END_SRC

** tide
The client ~tide~ talks with a Language Server Protocal (LSP) called ~tsserver~, which is the same
backend as in vscode. ~lsp-mode~ is an alternative client, but I experienced sluggish and slow
behavior in non-trivial projects.

Use tide together with ~js2-mode~ and/or ~typescript-mode~ to get all the autocomplete goodies.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'tide)

  (defun venikx/turn-on-tide ()
    "Set up the tide."
    (interactive)
    (tide-setup))

  (setq-default tide-completion-detailed t
                tide-completion-enable-autoimport-suggestions t)

  (general-define-key
   :keymaps 'tide-mode-map
   :states 'motion
   :prefix "SPC m"

   "r" 'tide-refactor
   "e" 'tide-rename-symbol
   "c" 'tide-rename-file)

  (add-hook 'typescript-mode-hook #'venikx/turn-on-tide)
  (add-hook 'js2-mode-hook #'venikx/turn-on-tide)
#+END_SRC

** typescript-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'typescript-mode)
  (setq-default typescript-indent-level 2)
#+END_SRC

** js- & js2-mode
Disable the annoying warnings, because ~eslint~ should catch those mistakes. Nowadays JSX is also
supported, so no need to have ~rjsx-mode~ anymore.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'js 'js2-mode)

  (setq-default js-indent-label 2
                js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil
                js2-highlight-level 3)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node". js2-jsx-mode))
#+END_SRC

** css-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'css-mode)
  (setq-default css-indent-offset 2)
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'web-mode)

  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;;   (flycheck-add-mode 'typescript-tslint 'web-mode))

  (setq-default web-mode-markup-indent-offset 2
                web-mode-attr-indent-offset 2
                web-mode-attr-value-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-enable-current-column-highlight 1
                web-mode-enable-current-element-highlight 1
                web-mode-block-padding 0
                web-mode-script-padding 2
                web-mode-style-padding 2)

  (add-to-list 'auto-mode-alist '("\\.htm.*$" . web-mode))
#+END_SRC

** emmet-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'emmet-mode)

  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
#+END_SRC

* TODO Find a place for these packages in the config
** Eldoc
#+BEGIN_SRC emacs-lisp
  (global-eldoc-mode -1)
  (add-hook 'prog-mode-hook #'eldoc-mode)
#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'rainbow-mode)
  (add-hook 'prog-mode-hook #'rainbow-mode)
#+END_SRC

** CC-mode
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                c-default-style '((java-mode . "java")
                                  (awk-mode . "awk")
                                  (other . "k&r")))

  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

* External packages
** EVIL
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-u-scroll t
        evil-want-keybinding nil)
  :hook (after-init . evil-mode)
  :config
  (with-eval-after-load 'evil-maps ; disable keybinding for company mode
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (defun venikx/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" 'venikx/save-and-kill-this-buffer))
#+END_SRC

*** Disable easy-keys to learn evil bindings
#+BEGIN_SRC emacs-lisp
(use-package no-easy-keys :config (no-easy-keys 1))
#+END_SRC

*** Enable relative line numbers
#+BEGIN_SRC emacs-lisp
(use-package nlinum-relative
  :after evil
  :hook (prog-mode . nlinum-relative-mode)
  :config (nlinum-relative-setup-evil))
#+END_SRC

*** Improve folding
#+BEGIN_SRC emacs-lisp
(use-package origami
  :after evil
  :commands origami-mode
  :config
  (add-hook 'prog-mode-hook 'origami-mode))
#+END_SRC

*** Enable surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :delight evil-surround-mode
  :config (global-evil-surround-mode 1))
#+END_SRC

*** Enable EVIL for certain modes
#+BEGIN_SRC emacs-lisp
(use-package evil-org :disabled :after evil)

(use-package evil-collection
  :after evil
  :config (evil-collection-init '(calender company ivy)))

(use-package evil-escape
  :after evil
  :delight evil-escape-mode
  :config
  (evil-escape-mode 1)
  (setq-default evil-escape-delay 0.2
                evil-escape-key-sequence "jk"
                evil-escape-excluded-states '(normal visual multiedit emacs motion)))
#+END_SRC

** Keybindings
*** Explain possible key configurations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 1
  :diminish which-key-mode
  :init (which-key-mode t))
#+END_SRC

*** General
#+BEGIN_SRC emacs-lisp
  ;; Global overrides
  (general-define-key
   "<left>" nil "<right>" nil "<up>" nil "<down>" nil
   "M-x" 'counsel-M-x
   "C-s" 'counsel-grep-or-swiper
   "<f2> l" 'counsel-find-library
   "<f2> u" 'counsel-unicode-char)

  ;; C-x overrides
  (general-define-key
   "C-x C-f" 'counsel-find-file
   "C-x C-b" 'ivy-switch-buffer
   "C-x b" 'ibuffer-list-buffers
   "C-x k" 'ido-kill-buffer)

  ;; General
  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"
   :global-prefix "C-SPC"
   ;; M-x
   "SPC" '(counsel-M-x :which-key "M-x")

   ;; Git
   "g" '(:ignore t :which-key "git")
   "gs" 'magit-status
   "gt" 'git-timemachine

   ;; Projectile
   "p" '(:ignore t :which-key "project")
   "pr" '(counsel-projectile-rg :which-key "ripgrep")
   "pb" '(counsel-projectile-switch-to-buffer :which-key "switch buffer")
   "pf" '(counsel-projectile-find-file :which-key "find file")

   ;; Org-mode
   "o" '(:ignore t :which-key "org")
   "oc" 'org-capture
   "oa" 'org-agenda

   ;; Finder
   "f" '(:ignore t :which-key "find")
   "ff" 'counsel-find-file
   "fr" 'ranger
   "fd" 'dictionary-search

   ;; Comments
   "c" '(:ignore t :which-key "comment")
   "cl" 'comment-line
   "cr" 'comment-region
   "cb" '(comment-box "box")

   ;; UI config
   "u" '(:ignore t :which-key "UI")
   "ut" '(counsel-load-theme :which-key "change theme")
   "uf" '(focus-mode :which-key "focus")

   ;; Testing commands
   "t" '(:ignore t :which-key "danger zone"))
#+END_SRC

** Completation
*** Emacs
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :delight ivy-mode
  :hook (after-init . ivy-mode)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d")
  (ivy-height 20))

(use-package ivy-rich
  :defer 0.1
  :delight ivy-rich-mode
  :after ivy
  :config
  (ivy-rich-mode 1))

(use-package swiper :after ivy)

(use-package counsel
  :delight counsel-mode
  :after ivy
  :config
  (counsel-mode 1))

(use-package counsel-projectile
  :delight projectile-mode
  :after counsel
  :custom
  (projectile-switch-project-ation 'projectile-dired)
  :config
  (setq projectile-sort-order 'recentf
        projectile-indexing-method 'hybrid)
  (counsel-projectile-mode))
#+END_SRC

*** Code
#+BEGIN_SRC emacs-lisp
(use-package company
  :delight company-mode
  :hook (prog-mode . company-mode)
  :config
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-selection-wrap-around t)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-frontend
                       company-echo-metadata-frontend)))
#+END_SRC

*** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :config
  (yas-global-mode)
  (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
  (advice-add 'company-complete-common :after (lambda () (when (equal my-company-point (point)) (yas-expand)))))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :commands (org-capture org-agenda)
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
  :config
  (add-hook 'org-mode-hook
            '(lambda () (setq fill-column 100) (turn-on-auto-fill)))
  :custom
  (org-src-fontify-natively t)
  (org-hide-emphasis-markers t)
  (org-use-fast-todo-selection t)
  (org-default-notes-file "~/Documents/org/gsd/inbox.org")
  (org-directory "~/Documents/org/")
  (org-agenda-files '("~/Documents/org/gsd/gsd.org"))
  (org-refile-use-outline-path 'file org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-targets
   '(("gsd.org" :maxlevel . 1)
     ("someday.org" :maxlevel . 1)))

  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
     (sequence "APPT(a)")
     (sequence "WAITING(w@/!)" "HOLD(h@/!)" "CANCELLED(c@/!)")))
  (org-capture-templates
   '(("t" "Todo" entry (file org-default-notes-file) "* TODO %? \nAdded: %U\n")
     ("n" "Next" entry (file org-default-notes-file) "* NEXT %? \nDEADLINE: %t")
     ("j" "Journal" entry
      (file+olp+datetree "~/Documents/org/journal.org") "* %?\n" :clock-in t :clock-resume t)))
  (org-tag-alist
   (quote (("@errand" . ?e) ("@mari" . ?m) ("@reading" . ?r) ("@computer" . ?c)
           ("@work" . ?w)
           ("@home" . ?h))))
  (org-fast-tag-selection-single-key nil)

  (org-todo-keyword-faces
   '(("TODO" :foreground "light coral" :weight bold)
     ("NEXT" :foreground "red" :weight bold)
     ("DONE" :foreground "sea green")
     ("APPT" :foreground "maroon")
     ("WAITING" :foreground "dark orange" :weight bold)
     ("CANCELLED" :foreground "dim gray")
     ("HOLD" :foreground "deep sky blue" :weight bold)))
  (org-pretty-entities t))

(use-package org-pomodoro
  :after org
  :custom
  (org-pomodoro-format "%s"))

(use-package org-bullets
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  :custom
  (org-ellipsis "⤵")
  (org-bullets-bullet-list '("■" "◆" "▲" "▶")))
#+END_SRC

** Version control
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer 3
  :custom
  (magit-completing-read-function 'ivy-completing-read)
  (git-commit-summary-max-length 50)
  :config
  (add-hook 'git-commit-mode-hook
            '(lambda () (setq fill-column 72) (turn-on-auto-fill))))

(use-package evil-magit :after evil magit)

(use-package git-timemachine
  :after evil magit
  :config
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+END_SRC

** Ranger
#+BEGIN_SRC emacs-lisp
(use-package ranger
  :config
  (ranger-override-dired-mode t)
  (setq ranger-width-preview 0.5))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook (after-init . global-flycheck-mode)
  :commands (flycheck-mode))
#+END_SRC

** Code
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :general
  (:keymaps 'rust-mode-map
   :states 'motion
   :prefix "SPC m"
   "f" 'rust-format-buffer
   "b" 'cargo-process-build
   "r" 'cargo-process-run
   "t" 'cargo-process-test)
  :mode ("\\.rs\\'" . rust-mode))

(use-package flycheck-rust
  :after flycheck rust-mode
  :hook (flycheck-mode . flycheck-rust-setup))

(use-package racer
  :after rust-mode
  :hook ((rust-mode . racer-mode)
         (racer-mode . eldoc-mode)))

(use-package cargo
  :after rust-mode
  :hook (rust-mode . cargo-minor-mode))
#+END_SRC

*** C/C++
#+BEGIN_SRC emacs-lisp
(use-package ggtags
    :disabled
    :commands ggtags-mode
    :config
    (unbind-key "M-<" ggtags-mode-map)
    (unbind-key "M->" ggtags-mode-map))

(use-package cc-mode
    :disabled
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                  (ggtags-mode 1)))))

;; (use-package lsp-mode)

;;  (use-package emacs-cquery
;;    :commands lsp-cquery-enable
;;    :init (setq cquery-executable "~/Programs/cquery/bin/cquery")
;;    (add-hook 'c-mode-hook #'cquery//enable)
;;    (add-hook 'c++-mode-hook #'cquery//enable))
#+END_SRC

*** JSON, Markdown and YAML
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :general
  (:keymaps 'json-mode-map
   :states 'motion
   :prefix "SPC m"
   "f" 'json-mode-beautify))

(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (add-hook markdown-mode-hook
            '(lambda () (setq fill-column 100) (turn-on-auto-fill)))
  :custom (markdown-command "multimarkdown"))

(use-package yaml-mode :mode "\\.yml\\'")
#+END_SRC

** Ledger
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :custom
  (ledger-clear-whole-transactions 1)
  :config
  (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
  :mode "\\.dat\\'")
#+END_SRC

** UI/UX
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :hook (text-mode . fci-mode))

(use-package smart-mode-line
  :config
  (setq sml/no-confirm-load-theme t
        sml/theme 'respectful)
  (sml/setup))

(use-package dimmer
  :init (dimmer-mode)
  :custom
  (dimmer-fraction 0.5))

(use-package focus
  :init (focus-mode))
#+END_SRC

** Path
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :init (exec-path-from-shell-initialize))
#+END_SRC

** Syntax highlighting for numbers, operators and escape sequences
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers :hook (prog-mode . highlight-numbers-mode))
(use-package highlight-operators :hook (prog-mode . highlight-operators-mode))
(use-package highlight-escape-sequences :hook (prog-mode . hes-mode))
#+END_SRC
