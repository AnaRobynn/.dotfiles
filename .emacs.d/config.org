#+TITLE: Emacs configuration
#+AUTHOR: venikx
#+STARTUP: content, indent

* Starting a Emacs daemon
No configuration here, but just information. More [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][here]].

1. Run Emacs as a daemon (starts the emacs server at the end of the initialization)
~$ emacs --daemon~
2. Connect to the Emacs daemon
~$ emacsclient -c~

** Why?
First reason is performance. Emacs initialization happens during starting the daemon. The second
reason is to be able to use ~org-capture~ more effectively (capturing stuff without an Emacs client running)

* Keybindings
** Reload ~init.el~
Custom command for reloading the init file. Currently is not bound to any keybindings just yet.

#+BEGIN_SRC emacs-lisp
  (defun venikx/load-init()
    "Reload '.emacs.d/init.el'."
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC

*** Explain possible key configurations
#+BEGIN_SRC emacs-lisp
  (venikx/require 'which-key)

  (add-hook 'after-init-hook #'which-key-mode)
#+END_SRC

** ~general.el~
Creating keybindings is done using general in stead of the regular Emacs keybindings, since it plays
nicely with ~evil-mode~.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'general)
  (general-define-key :states '(normal motion emacs) "SPC" nil)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   "c" '(:ignore t :which-key "comment")
   "cl" 'comment-line
   "cr" 'comment-region
   "cb" '(comment-box "box")

   "u" '(:ignore t :which-key "UI")
   "t" '(:ignore t :which-key "!DANGER!"))

#+END_SRC

* Modifying Emacs to modern defaults
** Remove unneeded bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (column-number-mode 1)
#+END_SRC

** Prettify the UI, scrolling and remove annoying default configs
Use prettier symbols, stop the cursor from blinking, follow semantic links automatically, backup
files in a separate backup folder, ...

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  (global-hl-line-mode)
  (blink-cursor-mode 0)

  (setq-default ring-bell-function 'ignore
                scroll-conservatively 10
                scroll-preserve-screen-position t
                inhibit-startup-screen t
                confirm-kill-processes nil
                backup-by-copying t
                backup-directory-alist `(("." . "~/.emacs-saves"))
                vc-follow-symlinks t)
#+END_SRC

** Display parentheses after a tiny delay
#+BEGIN_SRC emacs-lisp
  (setq-default show-paren-delay 0.1)
  (show-paren-mode)
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+END_SRC

** Indentation
Use spaces, instead of hard tabs. The TAB behavior is to try and trigger autocompletion.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
#+END_SRC

** Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
  (defun venikx/reset-text-size ()
    "Reset the text scale back to it's default."
    (interactive)
    (text-scale-set 0))

  (setq-default line-spacing 0)
  (venikx/reset-text-size)

  (general-define-key "C-=" 'venikx/reset-text-size
                      "C-+" 'text-scale-increase
                      "C--" 'text-scale-decrease)
#+END_SRC

** UTF-8
Adds UTF-8 support for Emacs (shame on you for support it by default).

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Setup $PATH correctly
#+BEGIN_SRC emacs-lisp
  (venikx/require 'exec-path-from-shell)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
  (venikx/require 'smart-mode-line)

  (setq-default sml/no-confirm-load-theme t
                sml/theme 'respectful)

  (sml/setup)
#+END_SRC

** Tools for focus working
#+BEGIN_SRC emacs-lisp
  (venikx/require 'dimmer 'focus)

  (setq-default dimmer-fraction 0.5)

  (dimmer-mode)
  (focus-mode)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   "uf" '(focus-mode :which-key "focus"))
#+END_SRC

** Syntax highlighting for numbers, operators and escape sequences
#+BEGIN_SRC emacs-lisp
  (venikx/require 'highlight-numbers 'highlight-operators 'highlight-escape-sequences)

  (add-hook 'prog-mode-hook #'highlight-numbers-mode)
  (add-hook 'prog-mode-hook #'highlight-operators-mode)
  (add-hook 'prog-mode-hook #'hes-mode)
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'challenger-deep t)
  ;; (load-theme 'gruvbox-dark-hard t)
  ;; (load-theme 'tao-yin t)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   "ut" '(counsel-load-theme :which-key "change theme"))
#+END_SRC

* Completion
** Ivy
#+BEGIN_SRC emacs-lisp
  (venikx/require 'ivy-rich 'counsel)

  (setq-default ivy-use-virtual-buffers t
                ivy-count-format "%d/%d"
                ivy-height 10)

  (add-hook 'after-init-hook #'ivy-rich-mode)
  (add-hook 'after-init-hook #'counsel-mode)

  ;; Global overrides
  (general-define-key
   "<left>" nil "<right>" nil "<up>" nil "<down>" nil
   "M-x" 'counsel-M-x
   "C-s" 'counsel-grep-or-swiper
   "<f2> l" 'counsel-find-library
   "<f2> u" 'counsel-unicode-char)

  ;; C-x overrides
  (general-define-key
   "C-x C-f" 'counsel-find-file
   "C-x C-b" 'ivy-switch-buffer
   "C-x b" 'ibuffer-list-buffers
   "C-x k" 'ido-kill-buffer)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"
   ;; M-x
   "SPC" '(counsel-M-x :which-key "M-x")

   ;; Finder
   "f" '(:ignore t :which-key "find")
   "ff" 'counsel-find-file)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (venikx/require 'company)

  (setq-default company-idle-delay 0
                company-minimum-prefix-length 2
                company-selection-wrap-around t
                company-tooltip-align-annotations t
                company-frontends '(company-pseudo-tooltip-frontend
                                    company-echo-metadata-frontend))

  (add-hook 'prog-mode-hook #'company-mode)

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
  (venikx/require 'yasnippet-snippets)

  (add-hook 'prog-mode-hook #'yas-global-mode)
#+END_SRC

* TODO EVIL
#+BEGIN_SRC emacs-lisp
  (venikx/require 'evil)

  (defun venikx/save-and-kill-this-buffer ()
    "Save and kill the current buffer, similar to regular ol' vim."
    (interactive)
    (save-buffer)
    (kill-this-buffer))

  (setq-default evil-want-C-u-scroll t
                evil-want-keybinding nil)

                ;; TODO make this work
  ;; (evil-ex-define-cmd "q" 'kill-this-buffer)
  ;; (evil-ex-define-cmd "wq" 'venikx/save-and-kill-this-buffer)

  (with-eval-after-load 'evil-maps ; disable keybinding for company mode
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))

  (add-hook 'after-init-hook 'evil-mode)
#+END_SRC

*** Enable relative line numbers
#+BEGIN_SRC emacs-lisp
  (venikx/require 'nlinum-relative)

  (nlinum-relative-setup-evil)

  (add-hook 'prog-mode-hook #'nlinum-relative-mode)
#+END_SRC

*** Improve folding
#+BEGIN_SRC emacs-lisp
  (venikx/require 'origami)

  (add-hook 'prog-mode-hook #'origami-mode)
#+END_SRC

*** Enable surround
#+BEGIN_SRC emacs-lisp
  (venikx/require 'evil-surround)

  (setq-default global-evil-surround-mode 1)
#+END_SRC

*** Enable EVIL for certain modes
#+BEGIN_SRC emacs-lisp
  (venikx/require 'evil-collection)

  (evil-collection-init '(calender company ivy))
#+END_SRC

* Magit
Uses ~evil-magit~ to use the evil specific keybindings to work magit.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'evil-magit)

  (setq-default magit-completing-read-function 'ivy-completing-read
                magit-auto-revert-mode nil
                git-commit-summary-max-length 50)

  (add-hook 'git-commit-mode-hook
            '(lambda () (setq fill-column 72) (turn-on-auto-fill)))

  (evil-magit-init)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   "g" '(:ignore t :which-key "git")
   "gs" 'magit-status
   "gb" 'magit-blame
   "gi" 'magit-init)
#+END_SRC

* File management
** Ranger
A complete replacement for dired-mode.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'ranger)

  (ranger-override-dired-mode t)
  (setq-default ranger-show-hidden t
                ranger-width-preview 0.5)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   "fr" 'ranger)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (venikx/require 'counsel-projectile)

  (setq-default projectile-sort-order 'recentf
                projectile-indexing-method 'hybrid)

  (add-hook 'after-init-hook #'counsel-projectile-mode)

  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"
   "p" '(:ignore t :which-key "projectile")
   "pr" '(counsel-projectile-rg :which-key "rg")
   "pb" '(counsel-projectile-switch-to-buffer :which-key "switch buffer")
   "pf" '(counsel-projectile-find-file :which-key "find file"))
#+END_SRC

* Programming
** Documentation
*** Eldoc
Disabling the global eldoc mode, since it's known to have perf issues.
It's probably better to have a more finegrained control over which modes should enable ~eldoc-mode~,
but the ~prog-mode-hook~ is fine for now.

#+BEGIN_SRC emacs-lisp
  (global-eldoc-mode -1)
  (add-hook 'prog-mode-hook #'eldoc-mode)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (venikx/require 'flycheck)

  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Web
*** prettier-js & node-modules-path
Loads the node-modules into the path.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'add-node-modules-path 'prettier-js)

  (add-hook 'js2-mode-hook #'add-node-modules-path)
  (add-hook 'js2-mode-hook #'prettier-js-mode)
#+END_SRC

*** tide
The client ~tide~ talks with a Language Server Protocal (LSP) called ~tsserver~, which is the same
backend as in vscode. ~lsp-mode~ is an alternative client, but I experienced sluggish and slow
behavior in non-trivial projects.

Use tide together with ~js2-mode~ and/or ~typescript-mode~ to get all the autocomplete goodies.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'tide)

  (defun venikx/turn-on-tide ()
    "Set up the tide."
    (interactive)
    (tide-setup))

  (setq-default tide-completion-detailed t
                tide-completion-enable-autoimport-suggestions t)

  (general-define-key
   :keymaps 'tide-mode-map
   :states 'motion
   :prefix "SPC m"

   "r" 'tide-refactor
   "e" 'tide-rename-symbol
   "c" 'tide-rename-file)

  (add-hook 'typescript-mode-hook #'venikx/turn-on-tide)
  (add-hook 'js2-mode-hook #'venikx/turn-on-tide)
#+END_SRC

*** typescript-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'typescript-mode)
  (setq-default typescript-indent-level 2)
#+END_SRC

*** js- & js2-mode
Disable the annoying warnings, because ~eslint~ should catch those mistakes. Nowadays JSX is also
supported, so no need to have ~rjsx-mode~ anymore.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'js 'js2-mode)

  (setq-default js-indent-label 2
                js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil
                js2-highlight-level 3)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node". js2-jsx-mode))
#+END_SRC

*** css-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'css-mode)
  (setq-default css-indent-offset 2)
#+END_SRC

*** web-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'web-mode)

  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;;   (flycheck-add-mode 'typescript-tslint 'web-mode))

  (setq-default web-mode-markup-indent-offset 2
                web-mode-attr-indent-offset 2
                web-mode-attr-value-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-enable-current-column-highlight 1
                web-mode-enable-current-element-highlight 1
                web-mode-block-padding 0
                web-mode-script-padding 2
                web-mode-style-padding 2)

  (add-to-list 'auto-mode-alist '("\\.htm.*$" . web-mode))
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (venikx/require 'json-mode)

  (general-define-key
   :keymaps 'json-mode-map
   :states 'motion
   :prefix "SPC m"

   "f" 'json-mode-beautify)
#+END_SRC

*** emmet-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'emmet-mode)

  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
#+END_SRC

** C/C++
*** CC-mode
Enable k&r dialect for C, popularized by [[https://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628][Programming in C]].

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                c-default-style '((java-mode . "java")
                                  (awk-mode . "awk")
                                  (other . "k&r")))

  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

** Rust
Installs and configures rust-mode to play nicely with racer and flycheck.
Also adds cargo support.

#+BEGIN_SRC emacs-lisp
  (venikx/require 'rust-mode 'racer 'cargo 'flycheck-rust)

  (general-define-key
   :keymaps 'rust-mode-map
   :states 'motion
   :prefix "SPC m"

   "f" 'rust-format-buffer
   "b" 'cargo-process-build
   "r" 'cargo-process-run
   "t" 'cargo-process-test)

  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'rust-mode-hook #'cargo-minor-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)

  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** Other
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (venikx/require 'rainbow-mode)
  (add-hook 'prog-mode-hook #'rainbow-mode)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
  (venikx/require 'org)

  ;; Configure files and paths
  (setq-default org-src-fontify-natively t
                org-hide-emphasis-markers t
                org-use-fast-todo-selection t
                org-default-notes-file "~/Documents/org/gsd/inbox.org"
                org-directory "~/Documents/org/"
                org-agenda-files '("~/Documents/org/gsd/gsd.org")
                org-refile-use-outline-path 'file org-outline-path-complete-in-steps nil
                org-refile-allow-creating-parent-nodes 'confirm
                org-refile-targets
                '(("gsd.org" :maxlevel . 1)
                  ("someday.org" :maxlevel . 1)))

  ;; Configure the tags, keywords and capture templates
  (setq-default org-fast-tag-selection-single-key nil
                org-pretty-entities t
                org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                                    (sequence "APPT(a)")
                                    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "CANCELLED(c@/!)"))

                org-capture-templates
                '(("t" "Todo" entry (file org-default-notes-file) "* TODO %? \nAdded: %U\n")
                  ("n" "Next" entry (file org-default-notes-file) "* NEXT %? \nDEADLINE: %t")
                  ("j" "Journal" entry
                   (file+olp+datetree "~/Documents/org/journal.org") "* %?\n" :clock-in t :clock-resume t))

                org-tag-alist
                (quote (("@errand" . ?e) ("@mari" . ?m) ("@reading" . ?r) ("@computer" . ?c)
                        ("@work" . ?w)
                        ("@home" . ?h)))

                org-todo-keyword-faces '(("TODO" :foreground "salmon" :weight bold)
                                         ("NEXT" :foreground "firebrick" :weight bold)
                                         ("DONE" :foreground "sea green")
                                         ("APPT" :foreground "maroon")
                                         ("WAITING" :foreground "dark orange" :weight bold)
                                         ("CANCELLED" :foreground "dim gray")
                                         ("HOLD" :foreground "deep sky blue" :weight bold)))

  ;; Keybindings
  (general-define-key
   :states '(motion emacs)
   :prefix "SPC"

   ;; Org-mode
   "o" '(:ignore t :which-key "org")
   "oc" 'org-capture
   "oa" 'org-agenda)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook
            '(lambda () (setq fill-column 100) (turn-on-auto-fill)))
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  (venikx/require 'org-pomodoro 'org-bullets)

  (setq-default org-pomodoro-format "%s"
                org-ellipsis "⤵"
                org-bullets-bullet-list '("■" "◆" "▲" "▶"))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
* Life
** Ledger
Managing finances in Emacs using ledger-mode (basic wrapper around the ledger-cli).

#+BEGIN_SRC emacs-lisp
  (venikx/require 'ledger-mode)

  (setq-default ledger-clear-whole-transactions 1)

  (add-to-list 'auto-mode-alist '("\\.dat\\'" . ledger-mode))
#+END_SRC

* Load packages without configuration
#+BEGIN_SRC emacs-lisp
  (venikx/require 'cl-lib
                  'yaml-mode
                  'toml-mode
                  'dockerfile-mode
                  'nginx-mode
                  'markdown-mode)
#+END_SRC
